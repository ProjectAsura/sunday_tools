//-------------------------------------------------------------------------------------------------
// File : Dice.h
// Desc : Dice Simulator.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

#ifndef __DICE_H__
#define __DICE_H__

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <random>
#include <asdxTexture.h>
#include <asdxTimer.h>
#include <asdxSprite.h>


///////////////////////////////////////////////////////////////////////////////////////////////////
// Dice class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Dice
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // State enum
    ///////////////////////////////////////////////////////////////////////////////////////////////
    enum State
    {
         Roulette = 0,      //!< ルーレット状態.
         Transition,        //!< 遷移状態.
         Fixed              //!< 出目確定状態.
    };

    //=============================================================================================
    // public variables.
    //=============================================================================================
    static const u32    NUM_DICE    = 5;    //!< サイコロの最大数.
    static const u32    NUM_PATTERN = 6;    //!< サイコロ出目の数（全部で6).

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Dice();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~Dice();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      pDeviceContext  デバイスコンテキストです.
    //! @param[in]      width                   ウィンドウの横幅です.
    //! @param[in]      height                  ウィンドウの縦幅です.
    //! @retval true    初期化成功.
    //! @retval false   初期化失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice, ID3D11DeviceContext* pDeviceContext, s32 width, s32 height );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      ルーレットを開始します.
    //---------------------------------------------------------------------------------------------
    void Start();

    //---------------------------------------------------------------------------------------------
    //! @brief      ルーレットを終了します.
    //---------------------------------------------------------------------------------------------
    void Stop();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //!
    //! @param[in]      pDeviceContext          デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void Draw( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      リサイズ時の処理です.
    //---------------------------------------------------------------------------------------------
    void OnResize( s32 width, s32 height );

    //---------------------------------------------------------------------------------------------
    //! @brief      サイコロの出目を取得します.
    //!
    //! @return     サイコロの出目を返却します.
    //---------------------------------------------------------------------------------------------
    u32 GetRoll( const u32 index ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      サイコロの出目の合計を取得します.
    //---------------------------------------------------------------------------------------------
    u32 GetRoll() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      状態を取得します.
    //!
    //! @return     状態を返却します.
    //---------------------------------------------------------------------------------------------
    State GetState() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      サイコロの数を設定します.
    //!
    //! @param[in]      diceCount       サイコロの数です.
    //---------------------------------------------------------------------------------------------
    void SetDiceCount( const u32 diceCount );

    //---------------------------------------------------------------------------------------------
    //! @brief      サイコロの数を取得します.
    //!
    //! @return     サイコロの数を返却します.
    //---------------------------------------------------------------------------------------------
    u32 GetDiceCount() const;

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    void Update();

private:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Param 
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct Param
    {
        u32         m_Roll;             //!< サイコロの出目.
        s32         m_TexIndex;         //!< テクスチャインデックス.
        s32         m_Type;             //!< ルーレットタイプ.
        asdx::int2  m_CurrPos;          //!< 現在の位置.
        asdx::int2  m_PrevPos;          //!< 以前の位置.
    };

    //=============================================================================================
    // private variables.
    //=============================================================================================
    static const u32    NUM_ANIMATION_TYPES   = 2;
    static const u32    NUM_ANIMATION_TEXTURE = 8;
    u32             m_DiceCount;        //!< 使用するサイコロの数.
    s32             m_PosIndex;         //!< 移動テーブルインデックス.
    State           m_State;            //!< 状態です.
    s32             m_Width;            //!< ウィンドウの横幅です.
    s32             m_Height;           //!< ウィンドウの縦幅です.
    s32             m_Size;             //!< サイコロ矩形のサイズです.
    asdx::Vector2   m_Scale;            //!< スケール係数.
    Param           m_Param[NUM_DICE];  //!< サイコロパラメータ.

    std::mt19937        m_Random;               //!< メルセンヌツイスター疑似乱数.
    asdx::StopWatch     m_Timer;                //!< タイマー.
    asdx::Texture2D     m_Texture[ NUM_ANIMATION_TYPES ][ NUM_ANIMATION_TEXTURE ];    //!< ルーレットテクスチャ
    asdx::Texture2D     m_Dice[NUM_PATTERN];    //!< 出目テクスチャ.
    asdx::Sprite        m_Sprite;               //!< スプライト.

    //=============================================================================================
    // private methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      サイコロを振ります.
    //---------------------------------------------------------------------------------------------
    u32 RollDice();

    //---------------------------------------------------------------------------------------------
    //! @brief      位置座標をリセットします.
    //---------------------------------------------------------------------------------------------
    void ResetPosition();
};


#endif//__DICE_H__


